{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","event","setState","search","target","value","state","a","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uXAEaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEtB,6BACGL,EAAMI,QAAQE,OAGjB,4BACGN,EAAMI,QAAQG,YCRRC,G,MAAW,SAACR,GACvB,OAAO,qBAAKC,UAAU,YAAf,SAEHD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAAUA,GAAtBA,EAAQC,WCJ3CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAAiC,uBAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,M,wBCqCvHG,E,kDA9Bb,aAAe,IAAD,6BACZ,eADY,0DAFJ,SAACC,GAAD,OAAW,EAAKC,SAAS,CAACC,OAAQF,EAAMG,OAAOC,WAKvD,EAAKC,MAAQ,CACXb,SAAU,GACVU,OAAQ,IALE,E,4FASd,iCAAAI,EAAA,sDACEC,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAAUmB,OAH3C,2C,0EAMA,WAAU,IAAD,EACoBC,KAAKP,MAAzBH,EADA,EACAA,OACDW,EAFC,EACQrB,SACmBsB,QAAQ,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAOa,kBAE9F,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAY,YAAEgB,KAAF,QAErD,cAAC,EAAD,CAAUpB,SAAUqB,W,GA5BZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.994582f5.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    \r\n    <h2>\r\n      {props.monster.name}\r\n    </h2>\r\n    \r\n    <p>\r\n      {props.monster.email}\r\n    </p>\r\n  </div>\r\n)","import { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n  return <div className=\"card-list\">\r\n    {\r\n      props.monsters.map( monster => <Card key={monster.id} monster={ monster } />)\r\n    }\r\n  </div>\r\n}","import './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange}/>;","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  #search = (event) => this.setState({search: event.target.value});\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      search: '',\n    }\n  }\n\n  async componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then( response => response.json())\n    .then( users => this.setState({monsters: users}))\n  }\n\n  render() {\n    const {search, monsters} = this.state;\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(search.toLowerCase()));\n\n      return (\n        <div className=\"App\">\n          <h1>Monsters Rolodex</h1>\n          <SearchBox placeholder=\"Search Monsters\" handleChange={this.#search}/>\n\n          <CardList monsters={filteredMonsters}/>\n        </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}